// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux(a=false, b=true, sel=instruction[15], out=cInstruction);
    Mux(a=true, b=false, sel=instruction[15], out=aInstruction);

    Mux16(a=aluOut, b=instruction, sel=aInstruction, out=aRegData);
    ARegister(in=aRegData, load=writeA, out=aRegOut, out[0..14]=addressM);

    DRegister(in=aluOut, load=writeD, out=dRegOut);

    Mux16(a=aRegOut, b=inM, sel=instruction[12], out=y);

    ALU(x=dRegOut,y=y,zx=instruction[11],nx=instruction[10],
        zy=instruction[9],ny=instruction[8],
        f=instruction[7],no=instruction[6],
        out=aluOut, out=outM, zr=isZr, ng=isNg);

    Mux(a=false, b=true, sel=instruction[0], out=i0);
    Mux(a=false, b=true, sel=instruction[1], out=i1);
    Mux(a=false, b=true, sel=instruction[2], out=i2);
    Not(in=i0, out=noti0);
    Not(in=i1, out=noti1);
    Not(in=i2, out=noti2);

    // null 000
    And(a=noti1, b=noti0, out=null0);
    And(a=null0, b=noti2, out=nll);
    Or(a=aInstruction, b=nll, out=isNull);

    // JGT 001
    And(a=noti1, b=i0, out=jgt0);
    And(a=jgt0, b=noti2, out=jgt);

    // JEQ =0 010
    And(a=noti0, b=i1, out=jeq0);
    And(a=jeq0, b=noti2, out=jeq);

    // JGE >= 0 011
    And(a=i0, b=i1, out=jge0);
    And(a=jge0, b=noti2, out=jge);

    // JLT < 0  100
    And(a=noti0, b=noti1, out=jlt0);
    And(a=jlt0, b=i2, out=jlt);

    // JNE != 0 101
    And(a=i0, b=noti1, out=jne0);
    And(a=jne0, b=i2, out=jne);

    // JLE <= 0 110
    And(a=noti0, b=i1, out=jle0);
    And(a=jle0, b=i2, out=jle);

    // JMP 111
    And(a=i0, b=i1, out=jmpTmp);
    And(a=jmpTmp, b=i2, out=jmp);

    Not(in=isZr, out=notZr);
    Not(in=isNg, out=notNg);
    And(a=notZr, b=notNg, out=isPos);

    And(a=isPos, b=jgt, out=doJgt);
    And(a=isZr, b=jeq, out=doJeq);
    Or(a=isZr, b=isPos, out=doJge0);
    And(a=doJge0, b=jge, out=doJge);
    Or(a=isPos, b=isNg, out=doJne0);
    And(a=doJne0, b=jne, out=doJne);
    And(a=isNg, b=jle, out=doJle0);
    And(a=isZr, b=jle, out=doJle1);
    Or(a=doJle0, b=doJle1, out=doJle);
    And(a=isNg, b=jlt, out=doJlt);

    Or(a=doJgt, b=doJeq, out=jmp0);
    Or(a=jmp0, b=doJge, out=jmp1);
    Or(a=jmp1, b=doJne, out=jmp2);
    Or(a=jmp2, b=doJle, out=jmp3);
    Or(a=jmp3, b=jmp, out=doJmp0);
    Or(a=doJmp0, b=doJlt, out=doJmp1);
    And(a=cInstruction, b=doJmp1, out=doJmp);

    Not(in=doJmp, out=jmpFail);
    Or(a=jmpFail, b=isNull, out=doInc);

    PC(in=aRegOut, load=doJmp, inc=doInc, reset=reset, out[0..14]=pc);

    Mux(a=false, b=true, sel=instruction[3], out=instr3);
    And(a=instr3, b=cInstruction, out=writeM);
    Mux(a=false, b=true, sel=instruction[4], out=instr4);
    And(a=instr4, b=cInstruction, out=writeD);

    Mux(a=false, b=true, sel=instruction[5], out=instr5);
    And(a=instr5, b=cInstruction, out=writeATmp);
    Or(a=writeATmp, b=aInstruction, out=writeA);
}
