// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 outAddrs, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way (in=true, sel=address[3..5], a=ram0, b=ram1,
                                    c=ram2, d=ram3,
                                    e=ram4, f=ram5,
                                    g=ram6, h=ram7);


    Mux (a=false, b=ram0, sel=load, out=loadRam0);
    Mux (a=false, b=ram1, sel=load, out=loadRam1);
    Mux (a=false, b=ram2, sel=load, out=loadRam2);
    Mux (a=false, b=ram3, sel=load, out=loadRam3);
    Mux (a=false, b=ram4, sel=load, out=loadRam4);
    Mux (a=false, b=ram5, sel=load, out=loadRam5);
    Mux (a=false, b=ram6, sel=load, out=loadRam6);
    Mux (a=false, b=ram7, sel=load, out=loadRam7);

    RAM8 (in=in, load=loadRam0, address=address[0..2], out=outAddr0);
    RAM8 (in=in, load=loadRam1, address=address[0..2], out=outAddr1);
    RAM8 (in=in, load=loadRam2, address=address[0..2], out=outAddr2);
    RAM8 (in=in, load=loadRam3, address=address[0..2], out=outAddr3);
    RAM8 (in=in, load=loadRam4, address=address[0..2], out=outAddr4);
    RAM8 (in=in, load=loadRam5, address=address[0..2], out=outAddr5);
    RAM8 (in=in, load=loadRam6, address=address[0..2], out=outAddr6);
    RAM8 (in=in, load=loadRam7, address=address[0..2], out=outAddr7);


    Mux8Way16 (a=outAddr0, b=outAddr1,
               c=outAddr2, d=outAddr3,
               e=outAddr4, f=outAddr5,
               g=outAddr6, h=outAddr7,
               sel=address[3..5],
               out=out);
}
